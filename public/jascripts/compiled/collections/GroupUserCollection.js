// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['compiled/collections/PaginatedCollection', 'compiled/models/GroupUser'], function(PaginatedCollection, GroupUser) {
    var GroupUserCollection;
    return GroupUserCollection = (function(_super) {

      __extends(GroupUserCollection, _super);

      function GroupUserCollection() {
        this.updateGroupId = __bind(this.updateGroupId, this);
        return GroupUserCollection.__super__.constructor.apply(this, arguments);
      }

      GroupUserCollection.prototype.model = GroupUser;

      GroupUserCollection.prototype.comparator = function(user) {
        return user.get('sortable_name').toLowerCase();
      };

      GroupUserCollection.collectionMap = {};

      GroupUserCollection.optionProperty('groupId');

      GroupUserCollection.prototype.initialize = function(models) {
        var _this = this;
        GroupUserCollection.__super__.initialize.apply(this, arguments);
        this.loaded = this.loadedAll = models != null;
        this.on('fetched:last', function() {
          return _this.loadedAll = true;
        });
        this.on('change:groupId', this.updateGroupId);
        GroupUserCollection.collectionMap[this.groupId] = this;
        return this.model = GroupUser.extend({
          defaults: {
            groupId: this.groupId
          }
        });
      };

      GroupUserCollection.prototype.load = function(target) {
        if (target == null) {
          target = 'all';
        }
        this.loadAll = target === 'all';
        this.loaded = true;
        if (target !== 'none') {
          this.fetch();
        }
        return this.load = function() {};
      };

      GroupUserCollection.prototype.updateGroupId = function(model, groupId) {
        var other, _ref, _ref1;
        this.remove(model);
        if ((_ref = this.group) != null) {
          _ref.decrement('members_count');
        }
        if (other = GroupUserCollection.collectionMap[groupId]) {
          if (other != null ? other.loaded : void 0) {
            other.add(model);
          }
          return (_ref1 = other.group) != null ? _ref1.increment('members_count') : void 0;
        }
      };

      return GroupUserCollection;

    })(PaginatedCollection);
  });

}).call(this);
