// Generated by CoffeeScript 1.3.3
(function() {

  define(['ember', 'jquery', 'underscore', '../models/module'], function(Ember, $, _, Module) {
    var IndexView, fixHelper;
    fixHelper = function(e, ui) {
      ui.children().each(function() {
        return $(this).width($(this).width());
      });
      return ui;
    };
    return IndexView = Ember.View.extend({
      didInsertElement: function() {
        var oldParentId,
          _this = this;
        $(window).scroll(function() {
          if ($(window).scrollTop() + $(window).height() >= $(document).height() - 300) {
            return Module.loadNextPage();
          }
        });
        if (false) {
          this.sortableModules = this.$(".sortable-modules").sortable({
            axis: "y",
            connectWith: ".sortable-modules",
            items: "> div.module",
            helper: fixHelper
          }).disableSelection();
          oldParentId = void 0;
        }
        if (false) {
          this.sortableModuleItems = this.$(".sortable-module-items > tbody").sortable({
            axis: "y",
            connectWith: ".sortable-module-items > tbody",
            items: "> tr",
            helper: fixHelper,
            change: function(event, ui) {
              if (!ui.sender) {
                return;
              }
              if ($(ui.sender).find(".module-item[data-module-item-id]").length > 1) {
                return $(ui.sender).removeClass("empty");
              } else {
                return $(ui.sender).addClass("empty");
              }
            },
            deactivate: function(event, ui) {
              if ($(event.target).find(".module-item[data-module-item-id]").length) {
                return $(event.target).removeClass("empty");
              } else {
                return $(event.target).addClass("empty");
              }
            },
            start: function(event, ui) {
              return oldParentId = ui.item.parents(".module").data("module-id");
            },
            update: function(event, ui) {
              var index, module_id, module_item_id, url;
              if (this !== ui.item.parent()[0]) {
                return;
              }
              module_id = ui.item.parents(".module").data("module-id");
              module_item_id = ui.item.data("module-item-id");
              index = ui.item.parent().find("> tr").index(ui.item);
              url = "/api/v1/courses/" + window.ENV.COURSE_ID + "/modules/" + module_id + "/items/" + module_item_id;
              return $.ajax({
                url: url,
                type: "PUT",
                data: {
                  module_item: {
                    position: index + 1
                  }
                },
                success: function(result) {}
              });
            }
          }).disableSelection();
          return this.sortableInitialized = true;
        }
      },
      observeAllTheThings: _.throttle(function() {
        return;
        if (this.state !== "inDOM") {
          return;
        }
        console.time("refresh");
        if (false) {
          this.sortableModules.sortable("refresh");
          this.sortableModuleItems.sortable("refresh");
        }
        return console.timeEnd("refresh");
      }, 150).observes("controller.@each.items.@each")
    });
  });

}).call(this);
