// Generated by CoffeeScript 1.3.3
(function() {

  define(['ember', './parse_page_links'], function(Ember, parsePageLinks) {
    var get;
    get = Ember.get;
    Ember.RecordArray.reopen({
      nextPage: function() {
        var model;
        if (!this.get('links.next')) {
          return;
        }
        model = this.get('model');
        return model.adapter.findNextPage(model, this);
      },
      pushObjects: function(data) {
        this._super(this.materializeData(this.get('model'), data));
        return this.notifyLoaded();
      },
      findFirstPage: function(url) {
        return alert('findFirstPage');
      },
      firstNextPage: function() {
        return alert('findNextPage');
      }
    });
    return Ember.Adapter.extend({
      find: function(record, id) {
        var self, url;
        url = this.buildURL(record.constructor, id);
        self = this;
        return this.ajax(url).then(function(_arg) {
          var data;
          data = _arg.data;
          self.didFind(record, id, data);
          return record;
        });
      },
      didFind: function(record, id, data) {
        var dataToLoad, rootKey;
        rootKey = get(record.constructor, 'rootKey');
        dataToLoad = (rootKey ? data[rootKey] : data);
        return record.load(id, dataToLoad);
      },
      findAll: function(klass, records) {
        var self, url;
        url = this.buildURL(klass);
        self = this;
        return this.ajax(url).then(function(_arg) {
          var data;
          data = _arg.data;
          self.didFindAll(klass, records, data);
          return records;
        });
      },
      didFindAll: function(klass, records, data) {
        var collectionKey, dataToLoad;
        collectionKey = get(klass, 'collectionKey');
        dataToLoad = (collectionKey ? data[collectionKey] : data);
        return records.load(klass, dataToLoad);
      },
      findQuery: function(klass, records, params) {
        var self, url;
        url = this.buildURL(klass);
        self = this;
        return this.ajax(url, params).then(function(_arg) {
          var data, jqXHR, textStatus;
          data = _arg.data, textStatus = _arg.textStatus, jqXHR = _arg.jqXHR;
          self.didFindQuery(klass, records, params, data, jqXHR);
          return records;
        });
      },
      didFindQuery: function(klass, records, params, data, jqXHR) {
        var collectionKey, dataToLoad;
        collectionKey = get(klass, 'collectionKey');
        records.set('links', parsePageLinks(jqXHR));
        dataToLoad = (collectionKey ? data[collectionKey] : data);
        records.load(klass, dataToLoad);
        return records;
      },
      findNextPage: function(klass, records, params) {
        var self, url;
        url = records.get('links.next');
        if (!url) {
          return;
        }
        records.set('links.next', null);
        self = this;
        return this.ajax(url, params).then(function(_arg) {
          var data, jqXHR, textStatus;
          data = _arg.data, textStatus = _arg.textStatus, jqXHR = _arg.jqXHR;
          self.didFindNextPage(klass, records, params, data, jqXHR);
          return records;
        });
      },
      didFindNextPage: function(klass, records, params, data, jqXHR) {
        records.set('links', parsePageLinks(jqXHR));
        records.pushObjects(data);
        records.trigger('didAddPage');
        return records;
      },
      createRecord: function(record) {
        var self, url;
        url = this.buildURL(record.constructor);
        self = this;
        return this.ajax(url, record.toJSON(), 'POST').then(function(_arg) {
          var data;
          data = _arg.data;
          self.didCreateRecord(record, data);
          return record;
        });
      },
      didCreateRecord: function(record, data) {
        var dataToLoad, primaryKey, rootKey;
        rootKey = get(record.constructor, 'rootKey');
        primaryKey = get(record.constructor, 'primaryKey');
        dataToLoad = (rootKey ? data[rootKey] : data);
        record.load(dataToLoad[primaryKey], dataToLoad);
        return record.didCreateRecord();
      },
      saveRecord: function(record) {
        var primaryKey, self, url;
        primaryKey = get(record.constructor, 'primaryKey');
        url = this.buildURL(record.constructor, get(record, primaryKey));
        self = this;
        return this.ajax(url, record.toJSON(), 'PUT').then(function(_arg) {
          var data;
          data = _arg.data;
          self.didSaveRecord(record, data);
          return record;
        });
      },
      didSaveRecord: function(record, data) {
        return record.didSaveRecord();
      },
      deleteRecord: function(record) {
        var primaryKey, self, url;
        primaryKey = get(record.constructor, 'primaryKey');
        url = this.buildURL(record.constructor, get(record, primaryKey));
        self = this;
        return this.ajax(url, record.toJSON(), 'DELETE').then(function(_arg) {
          var data;
          data = _arg.data;
          return self.didDeleteRecord(record, data);
        });
      },
      didDeleteRecord: function(record, data) {
        return record.didDeleteRecord();
      },
      ajax: function(url, params, method) {
        return this._ajax(url, params, method || 'GET');
      },
      buildURL: function(klass, id) {
        var urlRoot;
        urlRoot = get(klass, 'url');
        if (!urlRoot) {
          throw new Error('Ember.RESTAdapter requires a `url` property to be specified');
        }
        if (!Ember.isEmpty(id)) {
          return urlRoot + '/' + id;
        } else {
          return urlRoot;
        }
      },
      ajaxSettings: function(url, method) {
        return {
          url: url,
          type: method,
          dataType: 'json'
        };
      },
      _ajax: function(url, params, method) {
        var settings;
        settings = this.ajaxSettings(url, method);
        return new Ember.RSVP.Promise(function(resolve, reject) {
          if (params) {
            if (method === 'GET') {
              settings.data = params;
            } else {
              settings.data = JSON.stringify(params);
            }
          }
          settings.success = function(data, textStatus, jqXHR) {
            return resolve({
              data: data,
              textStatus: textStatus,
              jqXHR: jqXHR
            });
          };
          settings.error = function(jqXHR, textStatus, errorThrown) {
            return console.log('Error when fetching records', {
              jqXHR: jqXHR,
              textStatus: textStatus,
              errorThrown: errorThrown
            });
          };
          return Ember.$.ajax(settings);
        });
      }
    });
  });

}).call(this);
