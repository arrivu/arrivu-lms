// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['compiled/models/User', 'jquery.ajaxJSON'], function(User) {
    var GroupUser;
    return GroupUser = (function(_super) {

      __extends(GroupUser, _super);

      function GroupUser() {
        this.sync = __bind(this.sync, this);
        return GroupUser.__super__.constructor.apply(this, arguments);
      }

      GroupUser.prototype.defaults = {
        groupId: null,
        previousGroupId: null
      };

      GroupUser.prototype.initialize = function() {
        return this.on('change:groupId', this.updatePreviousGroupId);
      };

      GroupUser.prototype.joinGroup = function(groupId) {
        return $.ajaxJSON(this.createMembershipUrl(groupId), 'POST', {
          user_id: this.get('id')
        });
      };

      GroupUser.prototype.leavePreviousGroup = function() {
        return $.ajaxJSON(this.deleteMembershipUrl(this.get('previousGroupId'), this.get('id')), 'DELETE');
      };

      GroupUser.prototype.sync = function(method, model, options) {
        var groupId;
        groupId = model.get('groupId');
        if (groupId === null) {
          return this.leavePreviousGroup();
        } else {
          return this.joinGroup(groupId);
        }
      };

      GroupUser.prototype.updatePreviousGroupId = function() {
        return this.set('previousGroupId', this.previous('groupId'));
      };

      GroupUser.prototype.createMembershipUrl = function(groupId) {
        return "/api/v1/groups/" + groupId + "/memberships";
      };

      GroupUser.prototype.deleteMembershipUrl = function(groupId, userId) {
        return "/api/v1/groups/" + groupId + "/users/" + userId;
      };

      return GroupUser;

    })(User);
  });

}).call(this);
