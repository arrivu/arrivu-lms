// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'Backbone', 'compiled/collections/GroupCollection', 'compiled/collections/GroupUserCollection', 'compiled/models/progressable'], function(_, _arg, GroupCollection, GroupUserCollection, progressable) {
    var GroupCategory, Model;
    Model = _arg.Model;
    return GroupCategory = (function(_super) {

      __extends(GroupCategory, _super);

      function GroupCategory() {
        this.present = __bind(this.present, this);

        this.setUpProgress = __bind(this.setUpProgress, this);
        return GroupCategory.__super__.constructor.apply(this, arguments);
      }

      GroupCategory.prototype.urlRoot = '/api/v1/group_categories';

      GroupCategory.mixin(progressable);

      GroupCategory.prototype.groups = function() {
        this._groups = new GroupCollection(null);
        this._groups.url = "/api/v1/group_categories/" + this.id + "/groups?per_page=50";
        this._groups.loadAll = true;
        if (this.get('groupCount') !== 0) {
          this._groups.fetch();
        }
        this.groups = function() {
          return this._groups;
        };
        return this._groups;
      };

      GroupCategory.prototype.groupsCount = function() {
        var _ref, _ref1;
        return (_ref = (_ref1 = this._groups) != null ? _ref1.length : void 0) != null ? _ref : this.get('groupCount');
      };

      GroupCategory.prototype.unassignedUsers = function() {
        this._unassignedUsers = new GroupUserCollection(null, {
          groupId: null
        });
        this._unassignedUsers.url = "/api/v1/group_categories/" + this.id + "/users?unassigned=true&per_page=50";
        this.unassignedUsers = function() {
          return this._unassignedUsers;
        };
        return this._unassignedUsers;
      };

      GroupCategory.prototype.assignUnassignedMembers = function() {
        return $.ajaxJSON("/api/v1/group_categories/" + this.id + "/assign_unassigned_members", 'POST', {}, this.setUpProgress);
      };

      GroupCategory.prototype.setUpProgress = function(response) {
        return this.set({
          progress_url: response.url
        });
      };

      GroupCategory.prototype.present = function() {
        var data;
        data = _.extend({}, this.attributes);
        data.progress = this.progressModel.toJSON();
        return data;
      };

      return GroupCategory;

    })(Model);
  });

}).call(this);
