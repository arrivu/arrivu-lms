// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['Backbone', 'compiled/collections/GroupUserCollection'], function(Backbone, GroupUserCollection) {
    var Group;
    return Group = (function(_super) {

      __extends(Group, _super);

      function Group() {
        return Group.__super__.constructor.apply(this, arguments);
      }

      Group.prototype.modelType = 'group';

      Group.prototype.resourceName = 'groups';

      Group.prototype.users = function() {
        this._users = new GroupUserCollection(null, {
          groupId: this.id
        });
        this._users.group = this;
        this._users.url = "/api/v1/groups/" + this.id + "/users?per_page=50";
        this.users = function() {
          return this._users;
        };
        return this._users;
      };

      Group.prototype.usersCount = function() {
        var _ref;
        if ((_ref = this._users) != null ? _ref.loadedAll : void 0) {
          return this._users.length;
        } else {
          return this.get('members_count');
        }
      };

      Group.prototype.sync = function(method, model, options) {
        if (options == null) {
          options = {};
        }
        options.url = this.urlFor(method);
        return Backbone.sync(method, model, options);
      };

      Group.prototype.urlFor = function(method) {
        if (method === 'create') {
          return "/api/v1/group_categories/" + (this.get('group_category_id')) + "/groups";
        } else {
          return "/api/v1/groups/" + this.id;
        }
      };

      return Group;

    })(Backbone.Model);
  });

}).call(this);
