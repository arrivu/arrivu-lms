// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['Backbone', 'underscore', 'compiled/views/CollectionView'], function(Backbone, _, CollectionView) {
    var DraggableCollectionView;
    return DraggableCollectionView = (function(_super) {

      __extends(DraggableCollectionView, _super);

      function DraggableCollectionView() {
        this._updateSort = __bind(this._updateSort, this);

        this._onReceive = __bind(this._onReceive, this);

        this._noItemsViewIfEmpty = __bind(this._noItemsViewIfEmpty, this);
        return DraggableCollectionView.__super__.constructor.apply(this, arguments);
      }

      DraggableCollectionView.optionProperty('parentCollection');

      DraggableCollectionView.optionProperty('childKey');

      DraggableCollectionView.optionProperty('groupId');

      DraggableCollectionView.optionProperty('groupKey');

      DraggableCollectionView.optionProperty('reorderURL');

      DraggableCollectionView.optionProperty('noItemTemplate');

      DraggableCollectionView.prototype.sortOptions = {
        tolerance: 'pointer',
        opacity: 0.9,
        zIndex: 100,
        connectWith: '.draggable.collectionViewItems',
        placeholder: 'draggable-dropzone',
        forcePlaceholderSize: true
      };

      DraggableCollectionView.prototype.render = function(drag) {
        if (drag == null) {
          drag = true;
        }
        DraggableCollectionView.__super__.render.apply(this, arguments);
        if (drag) {
          this._initSort();
        }
        return this;
      };

      DraggableCollectionView.prototype.attachCollection = function() {
        DraggableCollectionView.__super__.attachCollection.apply(this, arguments);
        return this.collection.on('add', this._noItemsViewIfEmpty);
      };

      DraggableCollectionView.prototype._initSort = function() {
        this.$list.sortable(_.extend({}, this.sortOptions, {
          scope: this.cid
        })).on('sortreceive', this._onReceive).on('sortupdate', this._updateSort).on('sortremove', this._noItemsViewIfEmpty).on('sortover', this._noItemsViewIfEmpty);
        this.$list.disableSelection();
        return this._noItemsViewIfEmpty();
      };

      DraggableCollectionView.prototype._noItemsViewIfEmpty = function() {
        var items;
        items = this.$list.children();
        if (items.length === 0) {
          this.noItems = new Backbone.View({
            template: this.noItemTemplate,
            tagName: "li",
            className: "no-items"
          });
          this.noItems.render();
          return this.$list.append(this.noItems.el);
        } else {
          if (this.noItems) {
            return this.noItems.remove();
          }
        }
      };

      DraggableCollectionView.prototype.searchItem = function(itemId) {
        var chosen,
          _this = this;
        chosen = null;
        this.parentCollection.find(function(group) {
          var assignments, result;
          assignments = group.get(_this.childKey);
          result = assignments.find(function(a) {
            return a.id === itemId;
          });
          if (result != null) {
            return chosen = result;
          }
        });
        return chosen;
      };

      DraggableCollectionView.prototype._getItemId = function(item) {
        return parseInt(item.children(":first").data('item-id'));
      };

      DraggableCollectionView.prototype._onReceive = function(e, ui) {
        var item_id, model;
        item_id = this._getItemId(ui.item);
        model = this.searchItem(item_id);
        this._removeFromGroup(model);
        this._addToGroup(model);
        return this._noItemsViewIfEmpty();
      };

      DraggableCollectionView.prototype._removeFromGroup = function(model) {
        var old_children, old_group, old_group_id,
          _this = this;
        old_group_id = model.get(this.groupKey);
        old_group = this.parentCollection.find(function(g) {
          return g.id === old_group_id;
        });
        old_children = old_group.get(this.childKey);
        return old_children.remove(model, {
          silent: true
        });
      };

      DraggableCollectionView.prototype._addToGroup = function(model) {
        var new_children, new_group,
          _this = this;
        model.set(this.groupKey, this.groupId);
        new_group = this.parentCollection.find(function(g) {
          return g.id === _this.groupId;
        });
        new_children = new_group.get(this.childKey);
        return new_children.add(model, {
          silent: true
        });
      };

      DraggableCollectionView.prototype._updateSort = function(e, ui) {
        var $s, id, index, model, model_id, new_position, positions, s, sibling, _i, _len, _ref;
        e.stopImmediatePropagation();
        id = this._getItemId(ui.item);
        sibling = this.$list.children().find("[data-item-id=" + id + "]");
        if (sibling.length > 0) {
          positions = {};
          positions[id] = ui.item.index() + 1;
          _ref = ui.item.siblings();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            s = _ref[_i];
            $s = $(s);
            if ($s.hasClass("no-items")) {
              $s.remove();
            } else {
              model_id = this._getItemId($s);
              index = $s.prevAll().length;
              new_position = index + 1;
              positions[model_id] = new_position;
              model = this.searchItem(model_id);
              model.set('position', new_position);
            }
          }
          return this._sendPositions(this._orderPositions(positions));
        }
      };

      DraggableCollectionView.prototype._orderPositions = function(positions) {
        var id, model, order, output, sortable, _i, _len;
        sortable = [];
        for (id in positions) {
          order = positions[id];
          sortable.push([id, order]);
        }
        sortable.sort(function(a, b) {
          return a[1] - b[1];
        });
        output = [];
        for (_i = 0, _len = sortable.length; _i < _len; _i++) {
          model = sortable[_i];
          output.push(model[0]);
        }
        return output;
      };

      DraggableCollectionView.prototype._sendPositions = function(ids) {
        return $.post(this.reorderURL, {
          order: ids.join(",")
        });
      };

      return DraggableCollectionView;

    })(CollectionView);
  });

}).call(this);
