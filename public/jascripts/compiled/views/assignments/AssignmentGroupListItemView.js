// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['i18n!assignments', 'underscore', 'compiled/class/cache', 'compiled/views/DraggableCollectionView', 'compiled/views/assignments/AssignmentListItemView', 'compiled/views/assignments/CreateAssignmentView', 'compiled/views/assignments/CreateGroupView', 'compiled/views/assignments/DeleteGroupView', 'compiled/fn/preventDefault', 'jst/assignments/AssignmentGroupListItem'], function(I18n, _, Cache, DraggableCollectionView, AssignmentListItemView, CreateAssignmentView, CreateGroupView, DeleteGroupView, preventDefault, template) {
    var AssignmentGroupListItemView;
    return AssignmentGroupListItemView = (function(_super) {

      __extends(AssignmentGroupListItemView, _super);

      function AssignmentGroupListItemView() {
        this.expand = __bind(this.expand, this);

        this.createRulesToolTip = __bind(this.createRulesToolTip, this);
        return AssignmentGroupListItemView.__super__.constructor.apply(this, arguments);
      }

      AssignmentGroupListItemView.optionProperty('course');

      AssignmentGroupListItemView.prototype.tagName = "li";

      AssignmentGroupListItemView.prototype.className = "item-group-condensed";

      AssignmentGroupListItemView.prototype.itemView = AssignmentListItemView;

      AssignmentGroupListItemView.prototype.template = template;

      AssignmentGroupListItemView.child('createAssignmentView', '[data-view=createAssignment]');

      AssignmentGroupListItemView.child('editGroupView', '[data-view=editAssignmentGroup]');

      AssignmentGroupListItemView.child('deleteGroupView', '[data-view=deleteAssignmentGroup]');

      AssignmentGroupListItemView.prototype.els = _.extend({}, AssignmentGroupListItemView.prototype.els, {
        '.add_assignment': '$addAssignmentButton',
        '.delete_group': '$deleteGroupButton',
        '.edit_group': '$editGroupButton'
      });

      AssignmentGroupListItemView.prototype.events = {
        'click .element_toggler': 'toggleArrow',
        'click .tooltip_link': preventDefault(function() {})
      };

      AssignmentGroupListItemView.prototype.messages = {
        toggleMessage: I18n.t('toggle_message', "toggle assignment visibility")
      };

      AssignmentGroupListItemView.prototype.render = function() {
        if (this.createAssignmentView) {
          this.createAssignmentView.remove();
        }
        if (this.editGroupView) {
          this.editGroupView.remove();
        }
        if (this.deleteGroupView) {
          this.deleteGroupView.remove();
        }
        return AssignmentGroupListItemView.__super__.render.call(this, this.canManage());
      };

      AssignmentGroupListItemView.prototype.afterRender = function() {
        if (this.createAssignmentView) {
          this.createAssignmentView.hide();
          this.createAssignmentView.setTrigger(this.$addAssignmentButton);
        }
        if (this.editGroupView) {
          this.editGroupView.hide();
          this.editGroupView.setTrigger(this.$editGroupButton);
        }
        if (this.deleteGroupView) {
          this.deleteGroupView.hide();
          this.deleteGroupView.setTrigger(this.$deleteGroupButton);
        }
        if (this.model.hasRules()) {
          return this.createRulesToolTip();
        }
      };

      AssignmentGroupListItemView.prototype.createRulesToolTip = function() {
        var link;
        link = this.$el.find('.tooltip_link');
        return link.tooltip({
          position: {
            my: 'center top',
            at: 'center bottom+10',
            collision: 'fit fit'
          },
          tooltipClass: 'center top vertical',
          content: function() {
            return $(link.data('tooltipSelector')).html();
          }
        });
      };

      AssignmentGroupListItemView.prototype.initialize = function() {
        this.initializeCollection();
        AssignmentGroupListItemView.__super__.initialize.apply(this, arguments);
        this.initializeChildViews();
        this.model.groupView = this;
        return this.initCache();
      };

      AssignmentGroupListItemView.prototype.initializeCollection = function() {
        this.model.get('assignments').each(function(assign) {
          if (assign.multipleDueDates()) {
            return assign.doNotParse();
          }
        });
        this.collection = this.model.get('assignments');
        return this.collection.on('add', this.expand);
      };

      AssignmentGroupListItemView.prototype.initializeChildViews = function() {
        this.editGroupView = false;
        this.createAssignmentView = false;
        this.deleteGroupView = false;
        if (this.canManage()) {
          this.editGroupView = new CreateGroupView({
            assignmentGroup: this.model
          });
          this.createAssignmentView = new CreateAssignmentView({
            assignmentGroup: this.model
          });
          return this.deleteGroupView = new DeleteGroupView({
            model: this.model
          });
        }
      };

      AssignmentGroupListItemView.prototype.initCache = function() {
        var key;
        $.extend(true, this, Cache);
        this.cache.use('localStorage');
        key = this.cacheKey();
        if (!(this.cache.get(key) != null)) {
          return this.cache.set(key, true);
        }
      };

      AssignmentGroupListItemView.prototype.toJSON = function() {
        var attributes, data, showWeight, _ref;
        data = this.model.toJSON();
        showWeight = ((_ref = this.course) != null ? _ref.get('apply_assignment_group_weights') : void 0) && (data.group_weight != null);
        return attributes = _.extend(data, {
          showRules: this.model.hasRules(),
          rulesText: I18n.t('rules_text', "Rule", {
            count: this.model.countRules()
          }),
          displayableRules: this.displayableRules(),
          showWeight: showWeight,
          groupWeight: data.group_weight,
          toggleMessage: this.messages.toggleMessage
        });
      };

      AssignmentGroupListItemView.prototype.displayableRules = function() {
        var results, rules,
          _this = this;
        rules = this.model.rules() || {};
        results = [];
        if ((rules.drop_lowest != null) && rules.drop_lowest > 0) {
          results.push(I18n.t('drop_lowest_rule', {
            'one': 'Drop the lowest score',
            'other': 'Drop the lowest %{count} scores'
          }, {
            'count': rules.drop_lowest
          }));
        }
        if ((rules.drop_highest != null) && rules.drop_highest > 0) {
          results.push(I18n.t('drop_highest_rule', {
            'one': 'Drop the highest score',
            'other': 'Drop the highest %{count} scores'
          }, {
            'count': rules.drop_highest
          }));
        }
        if ((rules.never_drop != null) && rules.never_drop.length > 0) {
          _.each(rules.never_drop, function(never_drop_assignment_id) {
            var assign, name;
            assign = _this.model.get('assignments').findWhere({
              id: never_drop_assignment_id
            });
            if (name = assign != null ? assign.get('name') : void 0) {
              return results.push(I18n.t('never_drop_rule', 'Never drop %{assignment_name}', {
                'assignment_name': name
              }));
            }
          });
        }
        return results;
      };

      AssignmentGroupListItemView.prototype.isExpanded = function() {
        return this.cache.get(this.cacheKey());
      };

      AssignmentGroupListItemView.prototype.expand = function() {
        if (!this.isExpanded()) {
          return this.toggle(true);
        }
      };

      AssignmentGroupListItemView.prototype.toggle = function(setTo) {
        if (setTo == null) {
          setTo = false;
        }
        this.$el.find('.element_toggler').click();
        return this.cache.set(this.cacheKey(), setTo);
      };

      AssignmentGroupListItemView.prototype.cacheKey = function() {
        return ["course", this.course.get('id'), "user", this.currentUserId(), "ag", this.model.get('id'), "expanded"];
      };

      AssignmentGroupListItemView.prototype.toggleArrow = function(ev) {
        var arrow;
        arrow = $(ev.currentTarget).children('i');
        arrow.toggleClass('icon-mini-arrow-down').toggleClass('icon-mini-arrow-right');
        return this.toggleExpanded();
      };

      AssignmentGroupListItemView.prototype.toggleExpanded = function() {
        var expanded, key;
        key = this.cacheKey();
        expanded = !this.cache.get(key);
        return this.cache.set(key, expanded);
      };

      AssignmentGroupListItemView.prototype.canManage = function() {
        return ENV.PERMISSIONS.manage;
      };

      AssignmentGroupListItemView.prototype.currentUserId = function() {
        return ENV.current_user_id;
      };

      return AssignmentGroupListItemView;

    })(DraggableCollectionView);
  });

}).call(this);
