// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'compiled/models/AssignmentGroup', 'compiled/collections/NeverDropCollection', 'compiled/views/assignments/NeverDropCollectionView', 'compiled/views/DialogFormView', 'jst/assignments/CreateGroup', 'jst/EmptyDialogFormWrapper'], function(_, AssignmentGroup, NeverDropCollection, NeverDropCollectionView, DialogFormView, template, wrapper) {
    var CreateGroupView;
    return CreateGroupView = (function(_super) {

      __extends(CreateGroupView, _super);

      function CreateGroupView() {
        return CreateGroupView.__super__.constructor.apply(this, arguments);
      }

      CreateGroupView.prototype.defaults = {
        width: 600,
        height: 500
      };

      CreateGroupView.prototype.events = _.extend({}, CreateGroupView.prototype.events, {
        'click .dialog_closer': 'close'
      });

      CreateGroupView.prototype.els = {
        '.never_drop_rules_group': '$neverDropContainer'
      };

      CreateGroupView.prototype.template = template;

      CreateGroupView.prototype.wrapperTemplate = wrapper;

      CreateGroupView.optionProperty('assignmentGroups');

      CreateGroupView.optionProperty('assignmentGroup');

      CreateGroupView.optionProperty('course');

      CreateGroupView.prototype.initialize = function() {
        CreateGroupView.__super__.initialize.apply(this, arguments);
        return this.model = this.assignmentGroup || new AssignmentGroup({
          assignments: []
        });
      };

      CreateGroupView.prototype.onSaveSuccess = function() {
        CreateGroupView.__super__.onSaveSuccess.apply(this, arguments);
        if (this.assignmentGroup) {
          this.model.collection.view.render();
        } else {
          this.assignmentGroups.add(this.model);
          this.model = new AssignmentGroup({
            assignments: []
          });
        }
        return this.render();
      };

      CreateGroupView.prototype.getFormData = function() {
        var data, _ref;
        data = CreateGroupView.__super__.getFormData.apply(this, arguments);
        if (_.contains(["", "0"], data.rules.drop_lowest)) {
          delete data.rules.drop_lowest;
        }
        if (_.contains(["", "0"], data.rules.drop_highest)) {
          delete data.rules.drop_highest;
        }
        if (((_ref = data.rules.never_drop) != null ? _ref.length : void 0) === 0) {
          delete data.rules.never_drop;
        }
        return data;
      };

      CreateGroupView.prototype.showWeight = function() {
        var course, _ref;
        course = this.course || ((_ref = this.model.collection) != null ? _ref.course : void 0);
        return course != null ? course.get('apply_assignment_group_weights') : void 0;
      };

      CreateGroupView.prototype.checkGroupWeight = function() {
        if (this.showWeight()) {
          return this.$el.find('.group_weight').removeAttr("disabled");
        } else {
          return this.$el.find('.group_weight').attr("disabled", "disabled");
        }
      };

      CreateGroupView.prototype.getNeverDrops = function() {
        var rules;
        this.$neverDropContainer.empty();
        rules = this.model.rules();
        this.never_drops = new NeverDropCollection([], {
          assignments: this.model.get('assignments'),
          ag_id: this.model.get('id') || 'new'
        });
        this.ndCollectionView = new NeverDropCollectionView({
          collection: this.never_drops
        });
        this.$neverDropContainer.append(this.ndCollectionView.render().el);
        if (rules && rules.never_drop) {
          return this.never_drops.reset(rules.never_drop, {
            parse: true
          });
        }
      };

      CreateGroupView.prototype.toJSON = function() {
        var data, _ref, _ref1;
        data = this.model.toJSON();
        return _.extend(data, {
          disable_weight: !this.showWeight(),
          group_weight: this.showWeight() ? data.group_weight : null,
          label_id: this.model.get('id') || 'new',
          drop_lowest: ((_ref = this.model.rules()) != null ? _ref.drop_lowest : void 0) || 0,
          drop_highest: ((_ref1 = this.model.rules()) != null ? _ref1.drop_highest : void 0) || 0,
          editable_never_drop: this.model.get('assignments').length > 0
        });
      };

      CreateGroupView.prototype.openAgain = function() {
        CreateGroupView.__super__.openAgain.apply(this, arguments);
        this.checkGroupWeight();
        return this.getNeverDrops();
      };

      return CreateGroupView;

    })(DialogFormView);
  });

}).call(this);
