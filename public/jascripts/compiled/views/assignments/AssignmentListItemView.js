// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['i18n!assignments', 'Backbone', 'underscore', 'compiled/views/PublishIconView', 'compiled/views/VddTooltipView', 'compiled/views/assignments/CreateAssignmentView', 'compiled/fn/preventDefault', 'jst/assignments/AssignmentListItem'], function(I18n, Backbone, _, PublishIconView, VddTooltipView, CreateAssignmentView, preventDefault, template) {
    var AssignmentListItemView;
    return AssignmentListItemView = (function(_super) {

      __extends(AssignmentListItemView, _super);

      function AssignmentListItemView() {
        this.onDelete = __bind(this.onDelete, this);

        this.createModuleToolTip = __bind(this.createModuleToolTip, this);

        this.updatePublishState = __bind(this.updatePublishState, this);
        return AssignmentListItemView.__super__.constructor.apply(this, arguments);
      }

      AssignmentListItemView.prototype.tagName = "li";

      AssignmentListItemView.prototype.template = template;

      AssignmentListItemView.child('publishIconView', '[data-view=publish-icon]');

      AssignmentListItemView.child('vddDueTooltipView', '[data-view=vdd-due-tooltip]');

      AssignmentListItemView.child('editAssignmentView', '[data-view=editAssignment]');

      AssignmentListItemView.prototype.els = {
        '.edit_assignment': '$editAssignmentButton'
      };

      AssignmentListItemView.prototype.events = {
        'click .delete_assignment': 'onDelete',
        'click .tooltip_link': preventDefault(function() {})
      };

      AssignmentListItemView.prototype.messages = {
        confirm: I18n.t('confirms.delete_assignment', 'Are you sure you want to delete this assignment?')
      };

      AssignmentListItemView.prototype.initialize = function() {
        var attrs, observe;
        AssignmentListItemView.__super__.initialize.apply(this, arguments);
        this.initializeChildViews();
        if (this.canManage()) {
          this.model.on('change:published', this.updatePublishState);
          attrs = ["name", "points_possible", "due_at", "lock_at", "unlock_at"];
          observe = _.map(attrs, function(attr) {
            return "change:" + attr;
          }).join(" ");
          return this.model.on(observe, this.render);
        }
      };

      AssignmentListItemView.prototype.initializeChildViews = function() {
        this.publishIconView = false;
        this.editAssignmentView = false;
        this.vddDueTooltipView = false;
        if (this.canManage()) {
          this.publishIconView = new PublishIconView({
            model: this.model
          });
          this.editAssignmentView = new CreateAssignmentView({
            model: this.model
          });
          if (this.model.multipleDueDates()) {
            return this.vddDueTooltipView = new VddTooltipView({
              model: this.model
            });
          }
        }
      };

      AssignmentListItemView.prototype.updatePublishState = function() {
        return this.$('.ig-row').toggleClass('ig-published', this.model.get('published'));
      };

      AssignmentListItemView.prototype.render = function() {
        if (this.publishIconView) {
          this.publishIconView.remove();
        }
        if (this.editAssignmentView) {
          this.editAssignmentView.remove();
        }
        if (this.vddDueTooltipView) {
          this.vddDueTooltipView.remove();
        }
        return AssignmentListItemView.__super__.render.apply(this, arguments);
      };

      AssignmentListItemView.prototype.afterRender = function() {
        this.createModuleToolTip();
        if (this.editAssignmentView) {
          this.editAssignmentView.hide();
          return this.editAssignmentView.setTrigger(this.$editAssignmentButton);
        }
      };

      AssignmentListItemView.prototype.createModuleToolTip = function() {
        var link;
        link = this.$el.find('.tooltip_link');
        return link.tooltip({
          position: {
            my: 'center bottom',
            at: 'center top-10',
            collision: 'fit fit'
          },
          tooltipClass: 'center bottom vertical',
          content: function() {
            return $(link.data('tooltipSelector')).html();
          }
        });
      };

      AssignmentListItemView.prototype.toJSON = function() {
        var data, has_modules, joinedNames, moduleName, modules;
        data = this.model.toView();
        data.canManage = this.canManage();
        if (modules = this.modules(data.id)) {
          moduleName = modules[0];
          has_modules = modules.length > 0;
          joinedNames = modules.join(",");
          return _.extend(data, {
            modules: modules,
            module_count: modules.length,
            module_name: moduleName,
            has_modules: has_modules,
            joined_names: joinedNames
          });
        } else {
          return data;
        }
      };

      AssignmentListItemView.prototype.onDelete = function(e) {
        e.preventDefault();
        if (confirm(this.messages.confirm)) {
          return this["delete"]();
        }
      };

      AssignmentListItemView.prototype["delete"] = function() {
        this.model.destroy();
        return this.$el.remove();
      };

      AssignmentListItemView.prototype.modules = function(id) {
        return ENV.MODULES[id];
      };

      AssignmentListItemView.prototype.canManage = function() {
        return ENV.PERMISSIONS.manage;
      };

      return AssignmentListItemView;

    })(Backbone.View);
  });

}).call(this);
