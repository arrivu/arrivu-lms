// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['i18n!assignments', 'underscore', 'Backbone', 'compiled/class/cache', 'compiled/models/AssignmentGroup', 'jst/assignments/ToggleShowBy'], function(I18n, _, Backbone, Cache, AssignmentGroup, template) {
    var ToggleShowByView;
    return ToggleShowByView = (function(_super) {

      __extends(ToggleShowByView, _super);

      function ToggleShowByView() {
        this.toggleShowBy = __bind(this.toggleShowBy, this);

        this.setAssignmentGroups = __bind(this.setAssignmentGroups, this);

        this.initializeDateGroups = __bind(this.initializeDateGroups, this);

        this.initializeCache = __bind(this.initializeCache, this);
        return ToggleShowByView.__super__.constructor.apply(this, arguments);
      }

      ToggleShowByView.optionProperty('course');

      ToggleShowByView.optionProperty('assignmentGroups');

      ToggleShowByView.prototype.template = template;

      ToggleShowByView.prototype.els = {
        '#show_by': '$showBy',
        '#show_by_date': '$showByDate'
      };

      ToggleShowByView.prototype.events = {
        'click input': 'toggleShowBy'
      };

      ToggleShowByView.prototype.initialize = function() {
        ToggleShowByView.__super__.initialize.apply(this, arguments);
        this.initialized = false;
        this.initializeCache();
        this.course.on('change', this.initializeCache);
        this.course.on('change', this.render);
        this.assignmentGroups.once('reset', this.initializeDateGroups);
        this.on('changed:showBy', this.setAssignmentGroups);
        return this.on('changed:showBy', this.render);
      };

      ToggleShowByView.prototype.initializeCache = function() {
        if (this.course.get('id') == null) {
          return;
        }
        $.extend(true, this, Cache);
        if (ENV.current_user_id != null) {
          this.cache.use('localStorage');
        }
        if (!(this.cache.get(this.cacheKey()) != null)) {
          this.cache.set(this.cacheKey(), true);
        }
        return this.initialized = true;
      };

      ToggleShowByView.prototype.initializeDateGroups = function() {
        var assignments, dated, overdue, past, undated, upcoming;
        assignments = _.flatten(this.assignmentGroups.map(function(ag) {
          return ag.get('assignments').models;
        }));
        dated = _.select(assignments, function(a) {
          return a.dueAt() != null;
        });
        undated = _.difference(assignments, dated);
        past = _.chain(dated).select(function(a) {
          return (new Date()) > Date.parse(a.dueAt());
        }).sortBy(function(a) {
          return (new Date()) - Date.parse(a.dueAt());
        }).value();
        upcoming = _.chain(dated).difference(past).sortBy(function(a) {
          return Date.parse(a.dueAt());
        }).value();
        overdue = [];
        this.groupedByAG = this.assignmentGroups.models;
        this.groupedByDate = [
          new AssignmentGroup({
            id: 'overdue',
            name: 'Overdue Assignments',
            assignments: overdue
          }), new AssignmentGroup({
            id: 'upcoming',
            name: 'Upcoming Assignments',
            assignments: upcoming
          }), new AssignmentGroup({
            id: 'undated',
            name: 'Undated Assignments',
            assignments: undated
          }), new AssignmentGroup({
            id: 'past',
            name: 'Past Assignments',
            assignments: past
          })
        ];
        return this.setAssignmentGroups();
      };

      ToggleShowByView.prototype.toJSON = function() {
        return {
          visible: this.initialized,
          showByDate: this.showByDate()
        };
      };

      ToggleShowByView.prototype.afterRender = function() {
        var _ref;
        return (_ref = this.$showBy) != null ? _ref.buttonset() : void 0;
      };

      ToggleShowByView.prototype.setAssignmentGroups = function() {
        var groups,
          _this = this;
        groups = this.showByDate() ? this.groupedByDate : this.groupedByAG;
        groups = _.select(groups, function(group) {
          var hasWeight;
          hasWeight = _this.course.get('apply_assignment_group_weights') && (group.get('group_weight') != null) && group.get('group_weight') > 0;
          return group.get('assignments').length > 0 || hasWeight;
        });
        return this.assignmentGroups.reset(groups);
      };

      ToggleShowByView.prototype.showByDate = function() {
        if (!this.initialized) {
          return true;
        }
        return this.cache.get(this.cacheKey());
      };

      ToggleShowByView.prototype.cacheKey = function() {
        return ["course", this.course.get('id'), "user", ENV.current_user_id, "assignments_show_by_date"];
      };

      ToggleShowByView.prototype.toggleShowBy = function(ev) {
        var currentlyByDate, key, showByDate;
        ev.preventDefault();
        key = this.cacheKey();
        showByDate = this.$showByDate.is(':checked');
        currentlyByDate = this.cache.get(key);
        if (currentlyByDate !== showByDate) {
          this.cache.set(key, showByDate);
          return this.trigger('changed:showBy');
        }
      };

      return ToggleShowByView;

    })(Backbone.View);
  });

}).call(this);
