// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['Backbone', 'jst/content_migrations/ContentCheckbox', 'jst/content_migrations/ContentCheckboxCollection', 'compiled/collections/content_migrations/ContentCheckboxCollection', 'compiled/views/CollectionView', 'compiled/str/TextHelper'], function(Backbone, template, checkboxCollectionTemplate, CheckboxCollection, CollectionView, TextHelper) {
    var ContentCheckboxView;
    return ContentCheckboxView = (function(_super) {

      __extends(ContentCheckboxView, _super);

      function ContentCheckboxView() {
        this.syncWithLinkedResource = __bind(this.syncWithLinkedResource, this);

        this.toplevelCheckboxEvents = __bind(this.toplevelCheckboxEvents, this);

        this.uncheckAllChildren = __bind(this.uncheckAllChildren, this);

        this.checkAllChildren = __bind(this.checkAllChildren, this);
        return ContentCheckboxView.__super__.constructor.apply(this, arguments);
      }

      ContentCheckboxView.prototype.template = template;

      ContentCheckboxView.prototype.els = {
        '[data-content=sublevelCheckboxes]': '$sublevelCheckboxes',
        '.showHide': '$showHide'
      };

      ContentCheckboxView.prototype.initialize = function() {
        var _ref;
        ContentCheckboxView.__super__.initialize.apply(this, arguments);
        this.hasSubItemsUrl = !!this.model.get('sub_items_url');
        this.hasSubItems = !!this.model.get('sub_items');
        this.linkedTarget = (_ref = this.model.collection) != null ? _ref.linkedTarget : void 0;
        this.$el.on("click", "#selectAll-" + this.cid, this.checkAllChildren);
        this.$el.on("click", "#selectNone-" + this.cid, this.uncheckAllChildren);
        if (this.hasSubItemsUrl) {
          this.$el.on("change", "#checkbox-" + this.cid, this.toplevelCheckboxEvents);
        }
        if (this.model.get('linked_resource')) {
          return this.$el.on("change", "#checkbox-" + this.cid, this.syncWithLinkedResource);
        }
      };

      ContentCheckboxView.prototype.toJSON = function() {
        var json, linkedItem, _ref, _ref1;
        json = ContentCheckboxView.__super__.toJSON.apply(this, arguments);
        json.hasSubCheckboxes = this.hasSubItems || this.hasSubItemsUrl;
        json.onlyLabel = this.hasSubItems && !this.hasSubItemsUrl;
        json.checked = (_ref = this.model.collection) != null ? _ref.isTopLevel : void 0;
        if ((_ref1 = this.model.collection) != null ? _ref1.linkedTarget : void 0) {
          json.checked || (json.checked = true);
        }
        json.iconClass = this.getIconClass();
        json.count = this.model.get('count');
        json.showHide = this.model.get('count') || (this.hasSubItems && this.model.get('sub_items').length > 2);
        linkedItem = this.model.get('linked_resource');
        if (linkedItem && linkedItem.message) {
          json.linkedMessage = linkedItem.message;
        }
        return json;
      };

      ContentCheckboxView.prototype.iconClasses = {
        course_settings: "icon-settings",
        syllabus_body: "icon-syllabus",
        context_modules: "icon-module",
        assignments: "icon-assignment",
        quizzes: "icon-quiz",
        assessment_question_banks: "icon-collection",
        discussion_topics: "icon-discussion",
        wiki_pages: "icon-note-light",
        context_external_tools: "icon-lti",
        announcements: "icon-announcement",
        calendar_events: "icon-calendar-days",
        rubrics: "icon-rubric",
        groups: "icon-group",
        learning_outcomes: "icon-standards",
        attachments: "icon-document",
        assignment_groups: "icon-gradebook",
        folders: "icon-folder"
      };

      ContentCheckboxView.prototype.getIconClass = function() {
        return this.iconClasses[this.model.get('type')];
      };

      ContentCheckboxView.prototype.afterRender = function() {
        if (this.model.get('linked_resource')) {
          if (this.linkedTarget && this.model.get('property') === this.linkedTarget) {
            this.$el.find("#checkbox-" + this.cid).prop('checked', false);
          } else {
            this.$el.find("#checkbox-" + this.cid).prop('checked', true);
            this.syncWithLinkedResource();
          }
        }
        if (this.hasSubItems) {
          this.sublevelCheckboxes = new CheckboxCollection(this.model.get('sub_items'));
          if (this.linkedTarget) {
            this.sublevelCheckboxes.linkedTarget = this.linkedTarget;
          }
          return this.renderSublevelCheckboxes();
        }
      };

      ContentCheckboxView.prototype.checkAllChildren = function(event) {
        var _ref;
        event.preventDefault();
        if ((_ref = this.model.collection) != null ? _ref.isTopLevel : void 0) {
          return this.$el.find('[type=checkbox]').slice(1).prop('checked', true).trigger('change');
        } else {
          return this.$el.find('[type=checkbox]').prop('checked', true).trigger('change');
        }
      };

      ContentCheckboxView.prototype.uncheckAllChildren = function(event) {
        var _ref;
        event.preventDefault();
        if ((_ref = this.model.collection) != null ? _ref.isTopLevel : void 0) {
          return this.$el.find('[type=checkbox]').slice(1).prop('checked', false).trigger('change');
        } else {
          return this.$el.find('[type=checkbox]').prop('checked', false).trigger('change');
        }
      };

      ContentCheckboxView.prototype.toplevelCheckboxEvents = function(event) {
        var $target;
        if (!this.hasSubItemsUrl) {
          return;
        }
        $target = $(event.target);
        if ($target.is(':checked')) {
          this.$el.find('[type=checkbox]').slice(1).prop('checked', true).trigger('change');
          this.$sublevelCheckboxes.hide();
          return this.$showHide.hide();
        } else {
          this.$sublevelCheckboxes.show();
          this.$showHide.show();
          if (!this.sublevelCheckboxes) {
            this.linkedTarget = $target.data('linkedTarget');
            this.fetchSublevelCheckboxes();
            return this.renderSublevelCheckboxes();
          }
        }
      };

      ContentCheckboxView.prototype.fetchSublevelCheckboxes = function() {
        var dfd;
        this.sublevelCheckboxes = new CheckboxCollection;
        this.sublevelCheckboxes.url = this.model.get('sub_items_url');
        if (this.linkedTarget) {
          this.sublevelCheckboxes.linkedTarget = this.linkedTarget;
        }
        dfd = this.sublevelCheckboxes.fetch();
        return this.$el.disableWhileLoading(dfd);
      };

      ContentCheckboxView.prototype.renderSublevelCheckboxes = function() {
        var checkboxCollectionView;
        checkboxCollectionView = new CollectionView({
          collection: this.sublevelCheckboxes,
          itemView: ContentCheckboxView,
          el: this.$sublevelCheckboxes,
          template: checkboxCollectionTemplate
        });
        return checkboxCollectionView.render();
      };

      ContentCheckboxView.prototype.syncWithLinkedResource = function() {
        var $collection_box, $linked_el, checked, linkedItem, linkedProperty;
        linkedItem = this.model.get('linked_resource');
        checked = this.$el.find("#checkbox-" + this.cid).is(':checked');
        linkedProperty = "copy[" + linkedItem.type + "][id_" + linkedItem.migration_id + "]";
        $collection_box = $("[name=\"copy[all_" + linkedItem.type + "]\"]");
        if (!checked && $collection_box.is(':checked')) {
          $collection_box.data('linkedTarget', linkedProperty).prop('checked', false).trigger('change');
        }
        if ($linked_el = $("[name=\"" + linkedProperty + "\"]")) {
          return $linked_el.prop('checked', checked);
        }
      };

      return ContentCheckboxView;

    })(Backbone.View);
  });

}).call(this);
