// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'compiled/views/PaginatedCollectionView', 'compiled/views/groups/manage/GroupView', 'compiled/views/groups/manage/GroupUsersView', 'compiled/views/Filterable', 'jst/groups/manage/groups'], function(_, PaginatedCollectionView, GroupView, GroupUsersView, Filterable, template) {
    var GroupsView;
    return GroupsView = (function(_super) {

      __extends(GroupsView, _super);

      function GroupsView() {
        return GroupsView.__super__.constructor.apply(this, arguments);
      }

      GroupsView.mixin(Filterable);

      GroupsView.prototype.template = template;

      GroupsView.prototype.initialize = function() {
        GroupsView.__super__.initialize.apply(this, arguments);
        if (this.collection.loadAll) {
          return this.detachScroll();
        }
      };

      GroupsView.prototype.createItemView = function(model) {
        var groupUsersView;
        groupUsersView = new GroupUsersView({
          group: model,
          collection: model.users()
        });
        return new GroupView({
          model: model,
          groupUsersView: groupUsersView,
          addUnassignedMenu: this.options.addUnassignedMenu
        });
      };

      return GroupsView;

    })(PaginatedCollectionView);
  });

}).call(this);
