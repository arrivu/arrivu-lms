// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['i18n!groups', 'Backbone', 'compiled/views/groups/manage/RandomlyAssignMembersView', 'jst/groups/manage/groupCategoryDetail'], function(I18n, _arg, RandomlyAssignMembersView, template) {
    var GroupCategoryDetailView, View;
    View = _arg.View;
    return GroupCategoryDetailView = (function(_super) {

      __extends(GroupCategoryDetailView, _super);

      function GroupCategoryDetailView() {
        return GroupCategoryDetailView.__super__.constructor.apply(this, arguments);
      }

      GroupCategoryDetailView.prototype.template = template;

      GroupCategoryDetailView.prototype.els = {
        '.randomly-assign-members': '$randomlyAssignMembersLink'
      };

      GroupCategoryDetailView.prototype.initialize = function(options) {
        GroupCategoryDetailView.__super__.initialize.apply(this, arguments);
        return this.randomlyAssignUsersView = new RandomlyAssignMembersView({
          model: options.model
        });
      };

      GroupCategoryDetailView.prototype.attach = function() {
        var _this = this;
        this.collection.on('add remove reset', this.render);
        return this.collection.on('remove', function() {
          return _this.model.unassignedUsers().fetch();
        });
      };

      GroupCategoryDetailView.prototype.afterRender = function() {
        return this.randomlyAssignUsersView.setTrigger(this.$randomlyAssignMembersLink);
      };

      GroupCategoryDetailView.prototype.toJSON = function() {
        var json;
        json = GroupCategoryDetailView.__super__.toJSON.apply(this, arguments);
        json.groupCountText = I18n.t("group_count", {
          one: "1 group",
          other: "%{count} groups"
        }, {
          count: this.model.groupsCount()
        });
        json.studentOrganizedOrSelfSignupRestricted = this.model.get('role') === "student_organized" || this.model.get('self_signup') === "restricted";
        return json;
      };

      return GroupCategoryDetailView;

    })(View);
  });

}).call(this);
