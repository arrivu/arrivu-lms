// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['i18n!groups', 'underscore', 'Backbone', 'compiled/views/groups/manage/GroupCategoryDetailView', 'compiled/views/groups/manage/GroupsView', 'compiled/views/groups/manage/UnassignedUsersView', 'compiled/views/groups/manage/AddUnassignedMenu', 'compiled/views/groups/manage/AssignToGroupMenu', 'compiled/views/groups/manage/GroupEditView', 'compiled/models/Group', 'jst/groups/manage/groupCategory', 'compiled/jquery.rails_flash_notifications'], function(I18n, _, _arg, GroupCategoryDetailView, GroupsView, UnassignedUsersView, AddUnassignedMenu, AssignToGroupMenu, GroupEditView, Group, template) {
    var GroupCategoryView, View;
    View = _arg.View;
    return GroupCategoryView = (function(_super) {

      __extends(GroupCategoryView, _super);

      function GroupCategoryView() {
        this.deleteCategory = __bind(this.deleteCategory, this);
        return GroupCategoryView.__super__.constructor.apply(this, arguments);
      }

      GroupCategoryView.prototype.template = template;

      GroupCategoryView.optionProperty('groupCount');

      GroupCategoryView.optionProperty('randomlyAssignStudentsInProgress');

      GroupCategoryView.child('groupCategoryDetailView', '[data-view=groupCategoryDetail]');

      GroupCategoryView.child('unassignedUsersView', '[data-view=unassignedUsers]');

      GroupCategoryView.child('groupsView', '[data-view=groups]');

      GroupCategoryView.prototype.events = {
        'click .delete-category': 'deleteCategory',
        'click .add-group': 'addGroup'
      };

      GroupCategoryView.prototype.initialize = function(options) {
        var progress, _ref, _ref1, _ref2;
        this.groups = this.model.groups();
        if ((_ref = options.groupCategoryDetailView) == null) {
          options.groupCategoryDetailView = new GroupCategoryDetailView({
            model: this.model,
            collection: this.groups
          });
        }
        if ((_ref1 = options.groupsView) == null) {
          options.groupsView = this.groupsView(options);
        }
        if ((_ref2 = options.unassignedUsersView) == null) {
          options.unassignedUsersView = this.unassignedUsersView(options);
        }
        if (progress = this.model.get('progress')) {
          this.model.progressModel.set(progress);
          this.randomlyAssignStudentsInProgress = true;
        }
        return GroupCategoryView.__super__.initialize.apply(this, arguments);
      };

      GroupCategoryView.prototype.groupsView = function(options) {
        var addUnassignedMenu, users;
        addUnassignedMenu = null;
        if (ENV.IS_LARGE_ROSTER) {
          users = this.model.unassignedUsers(false);
          addUnassignedMenu = new AddUnassignedMenu({
            collection: users
          });
        }
        return new GroupsView({
          collection: this.groups,
          addUnassignedMenu: addUnassignedMenu
        });
      };

      GroupCategoryView.prototype.unassignedUsersView = function(options) {
        var assignToGroupMenu;
        if (ENV.IS_LARGE_ROSTER) {
          return false;
        }
        assignToGroupMenu = new AssignToGroupMenu({
          collection: this.groups
        });
        return new UnassignedUsersView({
          collection: this.model.unassignedUsers(false),
          groupsCollection: this.groups,
          assignToGroupMenu: assignToGroupMenu
        });
      };

      GroupCategoryView.prototype.attach = function() {
        var _this = this;
        this.model.on('destroy', this.remove, this);
        this.model.progressModel.on('change:url', function() {
          _this.model.progressModel.set({
            'completion': 0
          });
          return _this.randomlyAssignStudentsInProgress = true;
        });
        this.model.progressModel.on('change', this.render);
        return this.model.on('progressResolved', function() {
          _this.model.groups().fetch();
          _this.model.unassignedUsers().fetch();
          _this.randomlyAssignStudentsInProgress = false;
          return _this.render();
        });
      };

      GroupCategoryView.prototype.deleteCategory = function(e) {
        e.preventDefault();
        if (!confirm(I18n.t('delete_confirm', 'Are you sure you want to remove this group category?'))) {
          return;
        }
        return this.model.destroy({
          success: function() {
            return $.flashMessage(I18n.t('flash.removed', 'Group category successfully removed.'));
          },
          failure: function() {
            return $.flashError(I18n.t('flash.removeError', 'Unable to remove the group category. Please try again later.'));
          }
        });
      };

      GroupCategoryView.prototype.addGroup = function(e) {
        var new_group, _ref,
          _this = this;
        e.preventDefault();
        if ((_ref = this.createView) == null) {
          this.createView = new GroupEditView({
            editing: false
          });
        }
        new_group = new Group({
          group_category_id: this.model.id
        });
        new_group.on('sync', _.once(function() {
          return _this.groups.add(new_group);
        }));
        this.createView.model = new_group;
        return this.createView.toggle();
      };

      GroupCategoryView.prototype.toJSON = function() {
        var json;
        json = this.model.present();
        json.randomlyAssignStudentsInProgress = this.randomlyAssignStudentsInProgress;
        return json;
      };

      return GroupCategoryView;

    })(View);
  });

}).call(this);
