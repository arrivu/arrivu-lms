// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['Backbone', 'jst/groups/manage/assignToGroupMenu', 'compiled/jquery/outerclick'], function(_arg, template) {
    var AssignToGroupMenu, View;
    View = _arg.View;
    return AssignToGroupMenu = (function(_super) {

      __extends(AssignToGroupMenu, _super);

      function AssignToGroupMenu() {
        this.hide = __bind(this.hide, this);

        this.cancelHide = __bind(this.cancelHide, this);
        return AssignToGroupMenu.__super__.constructor.apply(this, arguments);
      }

      AssignToGroupMenu.prototype.events = {
        'click': 'cancelHide',
        'click .set-group': 'setGroup',
        'focusin': 'cancelHide',
        'focusout': 'hide',
        'outerclick': 'hide'
      };

      AssignToGroupMenu.prototype.attach = function() {
        this.collection.on('change add remove reset', this.render);
        return this.render();
      };

      AssignToGroupMenu.prototype.tagName = 'div';

      AssignToGroupMenu.prototype.className = 'assign-to-group-menu ui-tooltip popover content-top horizontal';

      AssignToGroupMenu.prototype.template = template;

      AssignToGroupMenu.prototype.showBy = function($target) {
        var _this = this;
        this.cancelHide();
        return setTimeout(function() {
          _this.render();
          _this.$el.insertAfter($target);
          _this.$el.show();
          _this.setElement(_this.$el);
          _this.$el.zIndex(1);
          return _this.$el.position({
            my: 'left+6 top-47',
            at: 'right center',
            of: $target
          });
        }, 20);
      };

      AssignToGroupMenu.prototype.cancelHide = function() {
        return clearTimeout(this.hideTimeout);
      };

      AssignToGroupMenu.prototype.hide = function() {
        var _this = this;
        return this.hideTimeout = setTimeout(function() {
          return _this.$el.detach();
        }, 20);
      };

      AssignToGroupMenu.prototype.setGroup = function(e) {
        e.preventDefault();
        e.stopPropagation();
        this.model.save('groupId', $(e.currentTarget).data('group-id'));
        return this.hide();
      };

      AssignToGroupMenu.prototype.toJSON = function() {
        return {
          groups: this.collection.toJSON()
        };
      };

      return AssignToGroupMenu;

    })(View);
  });

}).call(this);
