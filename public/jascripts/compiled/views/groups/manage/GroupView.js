// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['i18n!GroupView', 'underscore', 'Backbone', 'jst/groups/manage/group', 'compiled/views/groups/manage/GroupUsersView', 'compiled/views/groups/manage/GroupEditView', 'compiled/jquery.rails_flash_notifications'], function(I18n, _, _arg, template, GroupUsersView, GroupEditView) {
    var GroupView, View;
    View = _arg.View;
    return GroupView = (function(_super) {

      __extends(GroupView, _super);

      function GroupView() {
        this.updateSummary = __bind(this.updateSummary, this);

        this.deleteGroup = __bind(this.deleteGroup, this);

        this.editGroup = __bind(this.editGroup, this);
        return GroupView.__super__.constructor.apply(this, arguments);
      }

      GroupView.prototype.tagName = 'li';

      GroupView.prototype.className = 'group well';

      GroupView.prototype.template = template;

      GroupView.optionProperty('expanded');

      GroupView.optionProperty('addUnassignedMenu');

      GroupView.child('groupUsersView', '[data-view=groupUsers]');

      GroupView.prototype.events = {
        'click .toggle-group': 'toggleDetails',
        'click .edit-group': 'editGroup',
        'click .delete-group': 'deleteGroup',
        'click .add-user': 'showAddUser',
        'focus .add-user': 'showAddUser',
        'blur .add-user': 'hideAddUser'
      };

      GroupView.prototype.els = {
        '.group-summary': '$summary'
      };

      GroupView.prototype.attach = function() {
        this.expanded = false;
        this.users = this.model.users();
        this.model.on('change', this.render);
        this.model.on('destroy', this.remove, this);
        return this.users.on('add remove reset', this.updateSummary);
      };

      GroupView.prototype.editGroup = function(e) {
        var _ref;
        e.preventDefault();
        if ((_ref = this.editView) == null) {
          this.editView = new GroupEditView({
            model: this.model
          });
        }
        return this.editView.toggle();
      };

      GroupView.prototype.deleteGroup = function(e) {
        e.preventDefault();
        if (!confirm(I18n.t('delete_confirm', 'Are you sure you want to remove this group?'))) {
          return;
        }
        return this.model.destroy({
          success: function() {
            return $.flashMessage(I18n.t('flash.removed', 'Group successfully removed.'));
          },
          failure: function() {
            return $.flashError(I18n.t('flash.removeError', 'Unable to remove the group. Please try again later.'));
          }
        });
      };

      GroupView.prototype.toJSON = function() {
        var json;
        json = GroupView.__super__.toJSON.apply(this, arguments);
        json.summary = this.summary();
        return json;
      };

      GroupView.prototype.summary = function() {
        if (ENV.group_user_type === 'student') {
          return I18n.t("student_count", "student", {
            count: this.model.usersCount()
          });
        } else {
          return I18n.t("user_count", "user", {
            count: this.model.usersCount()
          });
        }
      };

      GroupView.prototype.updateSummary = function() {
        return this.$summary.text(this.summary());
      };

      GroupView.prototype.afterRender = function() {
        this.$el.toggleClass('group-expanded', this.expanded);
        return this.$el.toggleClass('group-collapsed', !this.expanded);
      };

      GroupView.prototype.toggleDetails = function(e) {
        e.preventDefault();
        this.expanded = !this.expanded;
        if (this.expanded && !this.users.loaded) {
          this.users.load(this.model.usersCount() ? 'all' : 'none');
        }
        return this.afterRender();
      };

      GroupView.prototype.showAddUser = function(e) {
        var $target;
        e.preventDefault();
        e.stopPropagation();
        $target = $(e.currentTarget);
        this.addUnassignedMenu.groupId = this.model.id;
        return this.addUnassignedMenu.showBy($target, e.type === 'click');
      };

      GroupView.prototype.hideAddUser = function(e) {
        return this.addUnassignedMenu.hide();
      };

      return GroupView;

    })(View);
  });

}).call(this);
