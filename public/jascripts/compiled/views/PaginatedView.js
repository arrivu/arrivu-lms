// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'jquery', 'Backbone', 'jst/PaginatedView'], function(_, $, Backbone, template) {
    var PaginatedView;
    return PaginatedView = (function(_super) {

      __extends(PaginatedView, _super);

      function PaginatedView() {
        return PaginatedView.__super__.constructor.apply(this, arguments);
      }

      PaginatedView.prototype.paginationLoaderTemplate = template;

      PaginatedView.prototype.paginationScrollContainer = window;

      PaginatedView.prototype.distanceTillFetchNextPage = 100;

      PaginatedView.prototype.initialize = function(options) {
        var ret;
        ret = PaginatedView.__super__.initialize.call(this, options);
        this.fetchOptions = options.fetchOptions;
        this.startPaginationListener();
        this.bindPaginationEvents();
        return ret;
      };

      PaginatedView.prototype.render = function() {
        var ret;
        ret = PaginatedView.__super__.render.apply(this, arguments);
        if (this.collection.fetchingNextPage) {
          this.showPaginationLoader();
        }
        return ret;
      };

      PaginatedView.prototype.showPaginationLoader = function() {
        var _ref;
        if ((_ref = this.$paginationLoader) == null) {
          this.$paginationLoader = $(this.paginationLoaderTemplate());
        }
        return this.placePaginationLoader();
      };

      PaginatedView.prototype.placePaginationLoader = function() {
        var _ref;
        return (_ref = this.$paginationLoader) != null ? _ref.insertAfter(this.el) : void 0;
      };

      PaginatedView.prototype.hidePaginationLoader = function() {
        var _ref;
        return (_ref = this.$paginationLoader) != null ? _ref.remove() : void 0;
      };

      PaginatedView.prototype.distanceToBottom = function() {
        var $container, containerScrollHeight;
        $container = $(this.paginationScrollContainer);
        containerScrollHeight = $container[0] === window ? $(document).height() : $container[0].scrollHeight;
        return containerScrollHeight - $container.scrollTop() - $container.height();
      };

      PaginatedView.prototype.startPaginationListener = function() {
        $(this.paginationScrollContainer).on("scroll.pagination" + this.cid + ", resize.pagination" + this.cid, $.proxy(this.fetchNextPageIfNeeded, this));
        return this.fetchNextPageIfNeeded();
      };

      PaginatedView.prototype.stopPaginationListener = function() {
        return $(this.paginationScrollContainer).off(".pagination" + this.cid);
      };

      PaginatedView.prototype.fetchNextPageIfNeeded = function() {
        var _this = this;
        return setTimeout(function() {
          if (_this.collection.fetchingNextPage) {
            return;
          }
          if (!_this.collection.urls || !_this.collection.urls.next) {
            if (_this.collection.length) {
              _this.stopPaginationListener();
            }
            return;
          }
          if ($(_this.paginationScrollContainer).is(':visible') && _this.distanceToBottom() < _this.distanceTillFetchNextPage) {
            return _this.collection.fetch(_.extend({
              page: 'next'
            }, _this.fetchOptions));
          }
        }, 0);
      };

      PaginatedView.prototype.bindPaginationEvents = function() {
        this.collection.on('beforeFetch:next', this.showPaginationLoader, this);
        this.collection.on('fetch:next', this.hidePaginationLoader, this);
        return this.collection.on('all', this.fetchNextPageIfNeeded, this);
      };

      return PaginatedView;

    })(Backbone.View);
  });

}).call(this);
