// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['i18n!calendar', 'Backbone', 'jst/calendar/calendarNavigator'], function(I18n, Backbone, template) {
    var CalendarNavigator;
    return CalendarNavigator = (function(_super) {

      __extends(CalendarNavigator, _super);

      function CalendarNavigator() {
        this.setTitle = __bind(this.setTitle, this);

        this.hide = __bind(this.hide, this);

        this.show = __bind(this.show, this);
        return CalendarNavigator.__super__.constructor.apply(this, arguments);
      }

      CalendarNavigator.prototype.template = template;

      CalendarNavigator.prototype.els = {
        '.navigation_title': '$title',
        '.navigation_buttons': '$buttons'
      };

      CalendarNavigator.prototype.events = {
        'click .navigate_prev': '_triggerPrev',
        'click .navigate_today': '_triggerToday',
        'click .navigate_next': '_triggerNext'
      };

      CalendarNavigator.prototype.initialize = function() {
        this.render();
        this.$buttons.buttonset();
        if (this.options.hide) {
          return this.hide();
        }
      };

      CalendarNavigator.prototype.show = function(visible) {
        if (visible == null) {
          visible = true;
        }
        return this.$el.toggle(visible);
      };

      CalendarNavigator.prototype.hide = function() {
        return this.show(false);
      };

      CalendarNavigator.prototype.setTitle = function(new_text) {
        return this.$title.html(new_text);
      };

      CalendarNavigator.prototype._triggerPrev = function(event) {
        return this.trigger('navigatePrev');
      };

      CalendarNavigator.prototype._triggerToday = function(event) {
        return this.trigger('navigateToday');
      };

      CalendarNavigator.prototype._triggerNext = function(event) {
        return this.trigger('navigateNext');
      };

      return CalendarNavigator;

    })(Backbone.View);
  });

}).call(this);
