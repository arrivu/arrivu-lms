// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'Backbone', 'jst/DiscussionTopics/IndexView', 'compiled/views/DiscussionTopics/DiscussionsSettingsView', 'compiled/views/DiscussionTopics/UserSettingsView'], function(_, _arg, template, DiscussionsSettingsView, UserSettingsView) {
    var IndexView, View;
    View = _arg.View;
    return IndexView = (function(_super) {
      var check_dt;

      __extends(IndexView, _super);

      function IndexView() {
        this.filterResults = __bind(this.filterResults, this);

        this.filter = __bind(this.filter, this);
        return IndexView.__super__.constructor.apply(this, arguments);
      }

      IndexView.prototype.template = template;

      IndexView.prototype.el = '#content';

      IndexView.child('discussionTagView', '.discussion_tag.discussion-list');

      IndexView.child('openDiscussionView', '.open.discussion-list');

      IndexView.child('lockedDiscussionView', '.locked.discussion-list');

      IndexView.child('pinnedDiscussionView', '.pinned.discussion-list');

      IndexView.prototype.events = {
        'click .ig-header .element_toggler': 'toggleDiscussionList',
        'click #edit_discussions_settings': 'toggleSettingsView',
        'change #onlyUnread, #onlyGraded': 'filterResults',
        'keyup #searchTerm': 'filterResults',
        'click .token-input-token': 'filterByTag'
      };

      IndexView.prototype.filterByTag = function(event) {
        var clicked, clickedTag, clicked_tag_id, key, value, _ref,
          _this = this;
        clickedTag = event.target;
        clicked_tag_id = event.target.value;
        clicked_tag_id = parseInt(clicked_tag_id, 10);
        _ref = ENV.TagWithDiscussionIds;
        for (key in _ref) {
          value = _ref[key];
          key = parseInt(key, 10);
          if (key === clicked_tag_id) {
            _.each(this.collections(), function(collection) {
              return collection.each(function(model) {
                return model.set('hidden', check_dt(model.get('id'), value));
              });
            });
          }
        }
        clicked = true;
        $(".token-input-token").removeClass("token-input-selected-token");
        return $(clickedTag).addClass("token-input-selected-token");
      };

      check_dt = function(my_item, my_array) {
        var item, _i, _len;
        for (_i = 0, _len = my_array.length; _i < _len; _i++) {
          item = my_array[_i];
          if (item === my_item) {
            return false;
          }
        }
        return true;
      };

      $(document).click(function() {
        return $(".token-input-token").removeClass("token-input-selected-token");
      });

      IndexView.prototype.filters = {
        onlyGraded: {
          active: false,
          fn: function(model) {
            return model.get('assignment_id');
          }
        },
        onlyUnread: {
          active: false,
          fn: function(model) {
            return model.get('unread_count') > 0 || model.get('read_state') === 'unread';
          }
        },
        searchTerm: {
          active: false,
          fn: function(model, term) {
            var regex;
            if (!term) {
              return;
            }
            regex = new RegExp(term, 'ig');
            return model.get('title').match(regex) || model.get('user_name').match(regex) || model.summary().match(regex);
          }
        }
      };

      IndexView.prototype.collections = function() {
        return [this.options.openDiscussionView.collection, this.options.lockedDiscussionView.collection, this.options.pinnedDiscussionView.collection];
      };

      IndexView.prototype.afterRender = function() {
        return this.$('#discussionsFilter').buttonset();
      };

      IndexView.prototype.activeFilters = function() {
        var _this = this;
        return _.select(this.filters, function(value, key) {
          return value.active;
        });
      };

      IndexView.prototype.filter = function(model, term) {
        return _.all(this.activeFilters(), function(filter) {
          return filter.fn.call(model, model, term);
        });
      };

      IndexView.prototype.filterResults = function(e) {
        var term,
          _this = this;
        if (e.target.type === 'checkbox') {
          this.filters[e.target.id].active = $(e.target).prop('checked');
          if ($('#searchTerm').val().length > 0) {
            term = $('#searchTerm').val();
          }
        } else {
          this.filters[e.target.id].active = $(e.target).val().length > 0;
          term = $(e.target).val();
        }
        return _.each(this.collections(), function(collection) {
          return collection.each(function(model) {
            if (_this.activeFilters().length > 0) {
              return model.set('hidden', !_this.filter(model, term));
            } else {
              return model.set('hidden', false);
            }
          });
        });
      };

      IndexView.prototype.toggleSettingsView = function() {
        return this.settingsView().toggle();
      };

      IndexView.prototype.toggleDiscussionList = function(e) {
        return $(e.currentTarget).find('i').toggleClass('icon-mini-arrow-down').toggleClass('icon-mini-arrow-right');
      };

      IndexView.prototype.settingsView = function() {
        this._settingsView || (this._settingsView = this.options.permissions.change_settings ? new DiscussionsSettingsView() : new UserSettingsView());
        return this._settingsView;
      };

      IndexView.prototype.toJSON = function() {
        return _.extend({}, {
          options: this.options,
          length: 1,
          atLeastOnePageFetched: true,
          new_topic_url: ENV.newTopicURL
        });
      };

      return IndexView;

    })(View);
  });

}).call(this);
